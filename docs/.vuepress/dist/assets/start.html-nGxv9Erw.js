import{_ as s,o as n,c as a,f as t}from"./app-5uqBhi11.js";const e={},p=t(`<h1 id="vue的一些知识点" tabindex="-1"><a class="header-anchor" href="#vue的一些知识点" aria-hidden="true">#</a> vue的一些知识点</h1><h2 id="ref-attribute" tabindex="-1"><a class="header-anchor" href="#ref-attribute" aria-hidden="true">#</a> ref attribute</h2><blockquote><p><code>ref</code>如果作用于普通元素，那引用的则是元素DOM本身，如果用于组件，引用将是该组件的实例；</p></blockquote><p>例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// vue3 中</span>
<span class="token comment">// ======template</span>
<span class="token operator">&lt;</span>p ref<span class="token operator">=</span><span class="token string">&quot;testRef&quot;</span><span class="token operator">&gt;</span>test<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>
<span class="token comment">// ======script</span>
<span class="token keyword">const</span> testRef <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>testRef<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
<span class="token comment">// outpt</span>
<span class="token constant">DOM</span>本身

<span class="token comment">// ======template</span>
<span class="token operator">&lt;</span>el<span class="token operator">-</span>button ref<span class="token operator">=</span><span class="token string">&quot;testRef&quot;</span><span class="token operator">&gt;</span>test<span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>button<span class="token operator">&gt;</span>
<span class="token comment">// ======script</span>
<span class="token keyword">const</span> testRef <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>testRef<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
<span class="token comment">// outpt</span>
proxy的代理对象，是子组件的实例，想访问子组件的<span class="token constant">DOM</span>对象，需要通过<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">testRef.value.ref</span><span class="token template-punctuation string">\`</span></span>访问
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="将对象作为props传递给子组件" tabindex="-1"><a class="header-anchor" href="#将对象作为props传递给子组件" aria-hidden="true">#</a> 将对象作为props传递给子组件</h2><blockquote><p>如果父组件将一个数据对象作为props传递给子组件，那么子组件其实接收到的是这个对象的引用，而不是这个对象的拷贝</p></blockquote>`,7),o=[p];function c(l,r){return n(),a("div",null,o)}const u=s(e,[["render",c],["__file","start.html.vue"]]);export{u as default};
