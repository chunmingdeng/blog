import{_ as n,o as s,c as a,f as e}from"./app-5uqBhi11.js";const t={},p=e(`<h1 id="threejs" tabindex="-1"><a class="header-anchor" href="#threejs" aria-hidden="true">#</a> threejs</h1><h2 id="shader-onbeforcompile" tabindex="-1"><a class="header-anchor" href="#shader-onbeforcompile" aria-hidden="true">#</a> shader&amp;onBeforCompile</h2><blockquote><p>在渲染之前修改着色器代码,基于这个功能可以给threejs原始材质添加各种特效</p></blockquote><ol><li>以一个粒子特效为例</li></ol><p>第一种方法是自己实现vertexShader&amp;fragmentShader</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Partical</span> extend <span class="token constant">THREE</span><span class="token punctuation">.</span>Points <span class="token punctuation">{</span>
  <span class="token comment">// vertexShader</span>
  <span class="token comment">// fragmentShader</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第二种方法利用onBeforeCompile, 关键点,<strong>内置的材质创建的材质对象是无法直接访问unifroms变量的,但是却可以在onBeforeCompile内访问</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 以下是伪代码</span>
<span class="token keyword">const</span> ma <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>PointsMaterial</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">map</span><span class="token operator">:</span> texture<span class="token punctuation">,</span>
  <span class="token literal-property property">alphaMap</span><span class="token operator">:</span> texture1<span class="token punctuation">,</span>
  <span class="token literal-property property">transparent</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// time必须是一个引用,以便能够在loop函数中修改值,同时shader能同时得到修改后的值</span>
<span class="token keyword">const</span> time <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">0.0</span><span class="token punctuation">}</span>
ma<span class="token punctuation">.</span><span class="token function-variable function">onBeforeCompile</span> <span class="token operator">=</span> <span class="token parameter">shader</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 这里的shader才有uniforms变量,在外部是访问不到的</span>
  shader<span class="token punctuation">.</span>uniforms<span class="token punctuation">.</span>u_time <span class="token operator">=</span> time<span class="token punctuation">;</span>
  shader<span class="token punctuation">.</span>vertexShader <span class="token operator">=</span> shader<span class="token punctuation">.</span>vertexShader<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&#39;void main() {&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;uniform float u_time;\\nvoid main() {&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  shader<span class="token punctuation">.</span>vertexShader <span class="token operator">=</span> shader<span class="token punctuation">.</span>vertexShader<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&#39;#include &lt;begin_vertex&gt;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;vec3 transformed = vec3(0.0);\\ntransformed = position - vec3(0.0,4.0,0.0) * u_time * 10.0;\\ntransformed.y = mod(transformed.y, 100.0);&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> mesh <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>Points</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>geometry<span class="token punctuation">,</span> ma<span class="token punctuation">)</span><span class="token punctuation">;</span>
scene<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>mesh<span class="token punctuation">)</span>

<span class="token keyword">const</span> <span class="token function-variable function">loop</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  time<span class="token punctuation">.</span>value <span class="token operator">=</span> t<span class="token punctuation">;</span>
  <span class="token function">requestAnimation</span><span class="token punctuation">(</span>loop<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="matrix" tabindex="-1"><a class="header-anchor" href="#matrix" aria-hidden="true">#</a> matrix</h2><blockquote><p>threejs中的<code>src/math/matrix[234]</code>是不支持复合变换的计算的,所以每次计算出旋转矩整或者位移矩整要立刻和模型进行及结算(无法计算出旋转+位移的复合矩阵,不支持)</p></blockquote><h3 id="matrix4" tabindex="-1"><a class="header-anchor" href="#matrix4" aria-hidden="true">#</a> matrix4</h3>`,11),o=[p];function c(i,l){return s(),a("div",null,o)}const u=n(t,[["render",c],["__file","base.html.vue"]]);export{u as default};
