import{_ as n,o as s,c as a,f as e}from"./app-5uqBhi11.js";const t={},c=e(`<h1 id="base" tabindex="-1"><a class="header-anchor" href="#base" aria-hidden="true">#</a> base</h1><hr><h2 id="包的版本管理" tabindex="-1"><a class="header-anchor" href="#包的版本管理" aria-hidden="true">#</a> 包的版本管理</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 如何描述一个包的版本号</span>
<span class="token comment">// &lt;前缀符&gt;&lt;主版本号&gt;.&lt;次版本号&gt;.&lt;补丁版本&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>当前缀符号为<code>^</code>,表示主要版本号不变，次版本号和补丁版本号可以升级</li><li>当前缀符号为<code>~</code>,表示主版本号+次版本号不变，补丁版本号可以升级</li><li>当没有前缀符，表示主版本号，次版本号，补丁版本号都不可以升级</li></ul><h2 id="基础模块" tabindex="-1"><a class="header-anchor" href="#基础模块" aria-hidden="true">#</a> 基础模块</h2><ul><li><code>http</code><ul><li><code>server.createServer()</code></li><li><code>server.lister()</code></li></ul></li><li><code>url</code></li><li><code>path</code></li><li><code>fs</code><ul><li><code>fs.readFile()</code></li><li><code>fs.readFileSync()</code></li><li><code>fs.createReadStream()</code></li><li><code>fs.createWriteStream()</code></li></ul></li></ul><h2 id="社区模块" tabindex="-1"><a class="header-anchor" href="#社区模块" aria-hidden="true">#</a> 社区模块</h2><ul><li><code>formidable</code><blockquote><p>文件上传模块：随着数据的上传接收它们，解析它们，并吐出它们，高效安全；不会因为需要大量缓冲而导致内存膨胀；</p></blockquote><ul><li><code>const form = new formidable.IncomingForm();</code></li><li><code>form.on(&#39;file&#39;, () =&gt; {});</code></li><li><code>form.on(&#39;field&#39;, () =&gt; {});</code></li><li><code>form.on(&#39;end&#39;, () =&gt; {});</code></li><li><code>form.parse(&lt;req&gt;);</code></li><li><code>form.parse(req, (err, fields, files) =&gt; {})</code></li><li><code>form.on(&#39;progress&#39;, (received, expected) =&gt; { var p = Math.floor(received / expected * 100)})</code></li></ul></li></ul><h2 id="process" tabindex="-1"><a class="header-anchor" href="#process" aria-hidden="true">#</a> process</h2><ul><li><code>stdin &amp; stdout</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token keyword">const</span> stdin <span class="token operator">=</span> process<span class="token punctuation">.</span>stdin<span class="token punctuation">;</span>
  stdin<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  stdin<span class="token punctuation">.</span><span class="token function">setEncoding</span><span class="token punctuation">(</span><span class="token string">&#39;utf8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  stdin<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>events</p><ul><li><code>beforeExit</code></li><li><code>disconnect</code></li><li><code>exit</code> callback function 中只能有同步函数，异步函数将会被放弃执行</li><li><code>message</code></li><li><code>uncaughtException</code></li></ul></li><li><p>property</p><ul><li><code>arch</code> 操作系统cpu架构</li><li><code>argv</code></li></ul></li></ul><h2 id="应用" tabindex="-1"><a class="header-anchor" href="#应用" aria-hidden="true">#</a> 应用</h2><ul><li>如何给进程（progress）传递参数，挂载到process.env上 <ul><li><code>PORT=8080 node &lt;*.js&gt;</code> 在访问该进程的时候就可以在process.env.PORT上访问到配置的端口<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>$ <span class="token constant">PORT</span><span class="token operator">=</span><span class="token number">8090</span> <span class="token constant">NODE_ENV</span><span class="token operator">=</span>dev <span class="token constant">SSA</span><span class="token operator">=</span>aaaa node app<span class="token punctuation">.</span>js
<span class="token comment">// app.js</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">PORT</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">SSA</span><span class="token punctuation">)</span>
<span class="token comment">// console</span>
<span class="token operator">&gt;</span> <span class="token number">8090</span>
  dev
  aaaa
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h2 id="原理" tabindex="-1"><a class="header-anchor" href="#原理" aria-hidden="true">#</a> 原理</h2><ul><li>nodejs如何运行js文件的 <ul><li>所有的js文件会被解析，对js的内容进行包装<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">exports<span class="token punctuation">,</span> require<span class="token punctuation">,</span> module<span class="token punctuation">,</span> __filename<span class="token punctuation">,</span> __dirname</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token comment">// 实际的js内容</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>这里就解释了为什么每个js文件中能够使用exports, require, module, __filename, __dirname这些对象</li></ul></li></ul>`,17),o=[c];function l(i,p){return s(),a("div",null,o)}const u=n(t,[["render",l],["__file","base.html.vue"]]);export{u as default};
