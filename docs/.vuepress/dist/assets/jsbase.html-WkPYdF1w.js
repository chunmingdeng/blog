import{_ as c,r as e,o as l,c as i,a as n,b as s,d as a,w as u,f as p}from"./app-5uqBhi11.js";const r="/blog/assets/96d49b081d5246d08fea7c934a50b799-Wj_j3uaI.png",k={},d=p('<h1 id="js基础" tabindex="-1"><a class="header-anchor" href="#js基础" aria-hidden="true">#</a> js基础</h1><h2 id="es-version" tabindex="-1"><a class="header-anchor" href="#es-version" aria-hidden="true">#</a> ES version</h2><p><img src="'+r+`" alt="ES version"></p><h2 id="_1-基础概念" tabindex="-1"><a class="header-anchor" href="#_1-基础概念" aria-hidden="true">#</a> 1.基础概念</h2><h4 id="js-中-和-区别是什么" tabindex="-1"><a class="header-anchor" href="#js-中-和-区别是什么" aria-hidden="true">#</a> JS 中 == 和 === 区别是什么？</h4><ol><li>对于string,number等基础类型，==和===有区别 <ul><li>不同类型间比较，==之比较“转化成同一类型后的值”看“值”是否相等，===如果类型不同，其结果就是不等。</li><li>同类型比较，直接进行“值”比较，两者结果一样。</li></ul></li><li>对于Array,Object等高级类型，==和===没有区别 <ul><li>进行“指针地址”比较。</li></ul></li><li>基础类型与高级类型，==和===有区别 <ul><li>对于==，将高级转化为基础类型，进行“值”比较。</li><li>因为类型不同，===结果为false。</li></ul></li></ol><h4 id="slice-splice" tabindex="-1"><a class="header-anchor" href="#slice-splice" aria-hidden="true">#</a> slice &amp; splice</h4><ol><li>前者有两个可选参数，后者有三个参数（一个必填，两个可选）</li><li>前者不修改原属组，后者修改原数组；</li><li>前者截取数组中的某部分作为新数组返回；后者1个参数，表示截取数组中的start到最后的元素，并返回；后者2个参数，表示截取[start, start+step)的元素，并返回；后者3个参数，表示截取[start, start+step)的元素，并替换为第三个参数；</li></ol><h4 id="export-module-exports" tabindex="-1"><a class="header-anchor" href="#export-module-exports" aria-hidden="true">#</a> export &amp; module.exports</h4><ol><li>在没有修改的情况下<code>export === module.exports</code>;</li><li>export其实指向的是module.exports的引用；</li><li><code>export = {};</code>这是错误的写法，修改了export的引用，会导致无法正常导出，修改对象上的属性则不回导致这个问题；</li></ol><h4 id="基本类型-引用类型" tabindex="-1"><a class="header-anchor" href="#基本类型-引用类型" aria-hidden="true">#</a> 基本类型 &amp; 引用类型</h4><ol><li>基本类型保存在栈内存中，引用类型保存在堆内存中；</li><li>基本类型：undefined, null, number, string, boolean, symbol; 引用类型：Object, Array, Function, Data, RegExp, Error；</li></ol><h4 id="基本事件" tabindex="-1"><a class="header-anchor" href="#基本事件" aria-hidden="true">#</a> 基本事件</h4><ol><li>contextmenu：鼠标的右击事件<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span>document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;contextmenu&#39;</span><span class="token punctuation">,</span> <span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li>drag：拖拽事件，当对某个元素进行拖拽监听（ondragstart）,想进行放置元素的时候需要对放置容器设置ondrop监听，同时需要对放置容器监听ondragover并且<code>e.preventDefault()</code>;􏷋􏳭􏷺􏼺􏻼􏳵􏸇􏴍􏺢􏺣􏼼􏻗􏵋􏳺􏴓􏵻􏳥􏴟􏴗􏳥􏳺􏴹􏵋􏳺􏴓􏵻􏴛􏴔􏳥􏳺􏻼􏳵􏳱􏴱􏴲􏸕􏵐􏴍􏼽􏷙􏻾􏳩􏵋􏳺􏴛􏳼􏻼􏳵􏳶</li><li>获取选中的文本：<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    <span class="token keyword">function</span> <span class="token function">getSelection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        window<span class="token punctuation">.</span>getSelection<span class="token operator">?</span>window<span class="token punctuation">.</span><span class="token function">getSelection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>document<span class="token punctuation">.</span>selection<span class="token punctuation">.</span><span class="token function">createRange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 移除选中的文本</span>
    document<span class="token punctuation">.</span><span class="token function">getSelection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeAllRanges</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h4 id="幂等操作" tabindex="-1"><a class="header-anchor" href="#幂等操作" aria-hidden="true">#</a> 幂等操作</h4><ol><li>如果一个事物不管是执行一次还是很多次，得到的结果都是相同的，那么该操作就是幂等；（http请求的get, head, delete, options, put, trace）</li></ol><h4 id="宏任务和微任务" tabindex="-1"><a class="header-anchor" href="#宏任务和微任务" aria-hidden="true">#</a> 宏任务和微任务</h4><ol><li>宏任务：当前调用栈中执行的任务称为宏任务。（主代码快，定时器等等）。</li><li>微任务： 当前（此次事件循环中）宏任务执行完，在下一个宏任务开始之前需要执行的任务为微任务。（可以理解为回调事件，promise.then，proness.nextTick等等）。</li><li>宏任务中的事件放在callback queue中，由事件触发线程维护；微任务的事件放在微任务队列中，由js引擎线程维护。</li></ol><h2 id="_2-排序算法" tabindex="-1"><a class="header-anchor" href="#_2-排序算法" aria-hidden="true">#</a> 2.排序算法</h2>`,19),v={href:"https://www.cnblogs.com/onepixel/articles/7674659.html",target:"_blank",rel:"noopener noreferrer"},m=p(`<ol><li>冒泡</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">bubbleSort</span> <span class="token operator">=</span> <span class="token parameter">arr</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
                arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span> 
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> arr<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-es6部分原理详解" tabindex="-1"><a class="header-anchor" href="#_3-es6部分原理详解" aria-hidden="true">#</a> 3.ES6部分原理详解</h2><h4 id="pormise" tabindex="-1"><a class="header-anchor" href="#pormise" aria-hidden="true">#</a> Pormise</h4><blockquote><p>自己实现promise；使用es6的class</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    <span class="token comment">// 极简的实现+链式调用+延迟机制+状态</span>
    <span class="token keyword">class</span> <span class="token class-name">Promise</span> <span class="token punctuation">{</span>
        <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>callbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token string">&#39;pending&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 增加状态</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 保存结果</span>
            <span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_resolve</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">onFulfilled</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 这里判断了调用then的时候，promise的状态（即resolve是否执行了），如果pending，则将函数放入调用栈，否则直接执行函数</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token string">&#39;pending&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 在resolve之前，跟之前逻辑一样，添加到callbacks中</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>callbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>onFulfilled<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// 在resolve之后，直接执行回调，返回结果了</span>
                <span class="token function">onFulfilled</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">_resolve</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token string">&#39;fulfilled&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 改变状态</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span> <span class="token comment">// 保存结果</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>callbacks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">fn</span> <span class="token operator">=&gt;</span> <span class="token function">fn</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-bind" tabindex="-1"><a class="header-anchor" href="#_4-bind" aria-hidden="true">#</a> 4.bind</h2>`,7),b={href:"https://www.webhek.com/post/javascript-bind.html",target:"_blank",rel:"noopener noreferrer"},h=n("br",null,null,-1),f=p(`<p><code>fun.bind(thisArg[, arg1[, arg2[, ...]]])</code></p><ul><li>thisArg 当绑定函数被调用时，该参数会作为原函数运行时的 this 指向。当使用 new 操作符调用绑定函数时，该参数无效。</li><li>arg1, arg2, … （可选）当绑定函数被调用时，这些参数加上绑定函数本身的参数会按照顺序作为原函数运行时的参数。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 利用apply实现原生浏览器的bind函数（低端浏览器不支持时候的hack）</span>
<span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">my_bind</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 另外的实现</span>
<span class="token keyword">function</span> <span class="token function">bind</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-几句话能够说明的前端效果原理" tabindex="-1"><a class="header-anchor" href="#_5-几句话能够说明的前端效果原理" aria-hidden="true">#</a> 5.几句话能够说明的前端效果原理</h2><ol><li>水印(参考naiveUI) <ul><li>利用水印元素<code>position:fixed;pointer-event: none;</code>的样式事项,<code>pointer-event:none;</code>会自动鼠标事件穿透; 水印可以用<code>canvas</code>绘图文,然后<code>canvas.toDataURL()</code></li></ul></li></ol><h2 id="奇奇怪怪的函数" tabindex="-1"><a class="header-anchor" href="#奇奇怪怪的函数" aria-hidden="true">#</a> 奇奇怪怪的函数</h2><ul><li>利用<code>a.b.c.e</code>创建嵌套对象<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">createObj</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> o <span class="token operator">=</span> p <span class="token operator">=</span> g <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> parts <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>parts<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token punctuation">[</span>parts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            p<span class="token punctuation">[</span>parts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 第一次这里的地址引用实际是g，所以修改的是g</span>
        <span class="token punctuation">}</span>
        old <span class="token operator">=</span> p<span class="token punctuation">;</span>
        p <span class="token operator">=</span> p<span class="token punctuation">[</span>parts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> g<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>利用上面的函数原理创建模块定义函数（JS设计模式中的同步模块模式）<a href="">javaScript设计模式p256</a></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token constant">F</span> <span class="token operator">=</span> <span class="token constant">F</span> <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token constant">F</span><span class="token punctuation">.</span><span class="token function-variable function">define</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">str<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> o <span class="token operator">=</span> p <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> parts <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span> parts<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token punctuation">[</span>parts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            p<span class="token punctuation">[</span>parts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        o <span class="token operator">=</span> p<span class="token punctuation">;</span>
        p <span class="token operator">=</span> p<span class="token punctuation">[</span>parts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> 
        o<span class="token punctuation">[</span>parts<span class="token punctuation">[</span><span class="token operator">--</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 定义模块/注册模块</span>
<span class="token comment">// F.define(&#39;a.b.c.d.e&#39;, function() {</span>
<span class="token comment">//     return function(){</span>
<span class="token comment">//         console.log(9999)</span>
<span class="token comment">//     }</span>
<span class="token comment">// })</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>模块的调用<a href="">javaScript设计模式p258</a></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token constant">F</span><span class="token punctuation">.</span><span class="token function-variable function">module</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">,</span>
        fn <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        parts <span class="token operator">=</span> args<span class="token punctuation">,</span>
        pl <span class="token operator">=</span> parts<span class="token punctuation">.</span>length<span class="token punctuation">,</span>
        i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
        p<span class="token punctuation">,</span> ms <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> pl<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>parts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>constructor <span class="token operator">==</span> String<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">var</span> modules <span class="token operator">=</span> parts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            p <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span> modules<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                p <span class="token operator">=</span> p<span class="token punctuation">[</span>modules<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            ms<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>

        <span class="token punctuation">}</span>
        i<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> ms<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 调用模块</span>
<span class="token comment">// F.module(&#39;a.b.c.d.e&#39;, function(e) {</span>
<span class="token comment">//     e()</span>
<span class="token comment">// })</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="框架实现theme切换" tabindex="-1"><a class="header-anchor" href="#框架实现theme切换" aria-hidden="true">#</a> 框架实现theme切换</h2>`,11),g=n("a",{href:""},"elementUI实现方式",-1),w=n("br",null,null,-1),y={href:"https://github.com/ElementUI/theme-preview",target:"_blank",rel:"noopener noreferrer"},_={href:"https://github.com/ElementUI/theme-preview/blob/master/src/app.vue#L250-L274",target:"_blank",rel:"noopener noreferrer"},x=n("br",null,null,-1),j={href:"https://github.com/ElementUI/theme-preview/blob/master/src/utils/formula.json",target:"_blank",rel:"noopener noreferrer"},S=n("br",null,null,-1),E={href:"https://github.com/ElementUI/theme-preview/blob/master/src/utils/color.js",target:"_blank",rel:"noopener noreferrer"},F=n("br",null,null,-1),P={href:"https://github.com/ElementUI/theme-preview/blob/master/src/app.vue#L198-L211",target:"_blank",rel:"noopener noreferrer"},q={href:"https://github.com/jyzwf/blog/issues/70",target:"_blank",rel:"noopener noreferrer"},A={href:"https://github.com/1019483075/lingxi/issues/26",target:"_blank",rel:"noopener noreferrer"},I=n("h2",{id:"webpack",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#webpack","aria-hidden":"true"},"#"),s(" webpack")],-1),L={href:"https://github.com/1019483075/lingxi#Vue%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%84%E7%B3%BB%E5%88%97",target:"_blank",rel:"noopener noreferrer"},B=n("ul",null,[n("li",null,"publicPath在webpack-dev-server的时候指定的是打进RAM的文件的位置"),n("li",null,"publicPath在npm run build的时候是所有的url文件的前缀")],-1),U=p(`<h2 id="js对象的自有属性和继承属性" tabindex="-1"><a class="header-anchor" href="#js对象的自有属性和继承属性" aria-hidden="true">#</a> js对象的自有属性和继承属性</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// scheme1</span>
<span class="token keyword">function</span> <span class="token function">Point</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x
    <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">toString</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// scheme2</span>
<span class="token keyword">function</span> <span class="token function">Point1</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x
    <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y
<span class="token punctuation">}</span>
<span class="token class-name">Point1</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">toString</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">}</span>

<span class="token comment">// scheme3</span>
<span class="token keyword">class</span> <span class="token class-name">Point2</span> <span class="token punctuation">{</span>
    x <span class="token operator">=</span> <span class="token number">0</span>
    y <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x
        <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y
    <span class="token punctuation">}</span>
    <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>scheme1定义的toString方法可以通过<code>Object.getOwnPropertyDescriptors</code>查看 scheme2定义的toString方法无法通过该方法查看到 scheme3定义的toString方法是在<code>Point2.__proto__</code>上的且<code>enumerable: false</code></p></blockquote><h2 id="特殊的表达式调用" tabindex="-1"><a class="header-anchor" href="#特殊的表达式调用" aria-hidden="true">#</a> 特殊的表达式调用</h2>`,4),D={href:"https://blog.csdn.net/qq_39446719/article/details/103838706",target:"_blank",rel:"noopener noreferrer"},R=n("p",null,"(0,function)(p1,p2)",-1);function $(O,V){const t=e("ExternalLinkIcon"),o=e("RouterLink");return l(),i("div",null,[d,n("blockquote",null,[n("p",null,[n("a",v,[s("link"),a(t)])])]),m,n("blockquote",null,[n("p",null,[n("a",b,[s("link"),a(t)]),h,s(" bind返回的值是一个函数，并不会直接调用函数")])]),f,n("ul",null,[n("li",null,[s("实现一 "),g,w,s(" 项目仓库在这："),n("a",y,[s("link"),a(t)]),s("实现其实很暴力： 先把默认主题文件中涉及到颜色的 CSS 值替换成关键词："),n("a",_,[s("link"),a(t)]),x,s(" 根据用户选择的主题色生成一系列对应的颜色值："),n("a",j,[s("link"),a(t)]),S,s(" 把关键词再换回刚刚生成的相应的颜色值："),n("a",E,[s("link"),a(t)]),F,s(" 直接在页面上加 style 标签，把生成的样式填进去："),n("a",P,[s("link"),a(t)])]),n("li",null,[s("实现二"),n("a",q,[s("antd实现方式"),a(t)])])]),n("blockquote",null,[n("p",null,[s("another article: "),n("a",A,[s("atricle1"),a(t)])])]),I,n("p",null,[n("a",L,[s("link"),a(t)])]),n("ul",null,[n("li",null,[s("webpack的publicPath"),a(o,{to:"/jsSeries/urlhttps:/www.cnblogs.com/SamWeb/p/8353367.html"},{default:u(()=>[s("link")]),_:1}),B])]),U,n("p",null,[n("a",D,[s("link"),a(t)])]),R])}const N=c(k,[["render",$],["__file","jsbase.html.vue"]]);export{N as default};
