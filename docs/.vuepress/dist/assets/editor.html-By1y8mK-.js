import{_ as t,r as e,o as p,c as o,a as n,b as s,d as c,f as l}from"./app-5uqBhi11.js";const i={},r=n("h2",{id:"jsoneditor",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#jsoneditor","aria-hidden":"true"},"#"),s(" jsoneditor")],-1),u=n("blockquote",null,[n("p",null,"这是一个npm插件，可以用来支持json的展示，编辑，相对底层，可以针对它做高层次的封装")],-1),k={href:"https://github.com/josdejong/jsoneditor",target:"_blank",rel:"noopener noreferrer"},d=l(`<h6 id="_1-1api" tabindex="-1"><a class="header-anchor" href="#_1-1api" aria-hidden="true">#</a> 1.1API</h6><ul><li>instance.set(json-data) # 设置数据</li><li>Instance.get() # 获取数据</li><li>instance.setText(text) #</li><li>instance.updateText(text) #updateText，更新json</li></ul><h6 id="_1-2config-options" tabindex="-1"><a class="header-anchor" href="#_1-2config-options" aria-hidden="true">#</a> 1.2config options</h6><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
	<span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;view&#39;</span><span class="token punctuation">,</span> <span class="token comment">//当前的模式，支持&#39;code&#39;, &#39;form&#39;, &#39;text&#39;, &#39;tree&#39;, &#39;view&#39;, &#39;preview&#39;</span>
	<span class="token literal-property property">modes</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">//提供切换的模式列表，支持&#39;code&#39;, &#39;form&#39;, &#39;text&#39;, &#39;tree&#39;, &#39;view&#39;, &#39;preview&#39;</span>
	<span class="token function-variable function">onModeChange</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">newMode<span class="token punctuation">,</span> oldMode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">//mode切换的callback</span>
	<span class="token function-variable function">onEditable</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">//编辑的时候触发函数，return false会禁止编辑</span>
  <span class="token comment">//	node会是以下形式的对象，</span>
  <span class="token comment">//  In modes code and text, node is empty: no path, field, or value，利用这个特性可以做只展示的json</span>
  <span class="token comment">//   {</span>
  <span class="token comment">//     field: &#39;FIELD&#39;,</span>
  <span class="token comment">//     value: &#39;VALUE&#39;,</span>
  <span class="token comment">//     path: [&#39;PATH&#39;, &#39;TO&#39;, &#39;NODE&#39;]</span>
  <span class="token comment">//   }</span>
  <span class="token literal-property property">autocomplete</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">//可以用来最autocomplete，关键字包含的都可以提示</span>
    <span class="token function-variable function">getOptions</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string">&#39;apple&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;cranberry&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;raspberry&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;pie&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;mango&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;mandarine&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;melon&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;appleton&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">onTextSelectionChange</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">start<span class="token punctuation">,</span> end<span class="token punctuation">,</span> text</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">//文本选择变化的callback</span>
  <span class="token function-variable function">onSelectionChange</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">start<span class="token punctuation">,</span> end</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">//选择变化的callback，这个貌似只有在mode：tree时触发</span>
  <span class="token function-variable function">onChangeText</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">jsonString</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">//json文本被编辑的时候触发</span>
  <span class="token function-variable function">onEvent</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">//任何一个事件发生都会触发这个函数</span>
  <span class="token function-variable function">onValidate</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">json</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">//任何文本修改都会触发校验</span>
  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="monaco-editor" tabindex="-1"><a class="header-anchor" href="#monaco-editor" aria-hidden="true">#</a> monaco-editor</h2><h4 id="快速入门" tabindex="-1"><a class="header-anchor" href="#快速入门" aria-hidden="true">#</a> 快速入门</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> monaco <span class="token keyword">from</span> <span class="token string">&#39;monaco-editor&#39;</span>
<span class="token comment">// monaco是利用webworker来提升处理文本的速度的，所以要使用，需要引用对应的worker</span>
<span class="token keyword">import</span> editorWorker <span class="token keyword">from</span> <span class="token string">&#39;monaco-editor/esm/vs/editor/editor.worker?worker&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> jsonWorker <span class="token keyword">from</span> <span class="token string">&#39;monaco-editor/esm/vs/language/json/json.worker?worker&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> cssWorker <span class="token keyword">from</span> <span class="token string">&#39;monaco-editor/esm/vs/language/css/css.worker?worker&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> htmlWorker <span class="token keyword">from</span> <span class="token string">&#39;monaco-editor/esm/vs/language/html/html.worker?worker&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> tsWorker <span class="token keyword">from</span> <span class="token string">&#39;monaco-editor/esm/vs/language/typescript/ts.worker?worker&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// 获取当前editor支持的语言列表（88种）</span>
monaco<span class="token punctuation">.</span>languages<span class="token punctuation">.</span><span class="token function">getLanguages</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 创建编辑器</span>
<span class="token comment">// 创建对应的格式文本之前，先要将对应的文本处理worker先挂载到全局window上</span>
self<span class="token punctuation">.</span>MonacoEnvironment <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">getWorker</span><span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> label</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>label <span class="token operator">===</span> <span class="token string">&#39;json&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">jsonWorker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>label <span class="token operator">===</span> <span class="token string">&#39;css&#39;</span> <span class="token operator">||</span> label <span class="token operator">===</span> <span class="token string">&#39;scss&#39;</span> <span class="token operator">||</span> label <span class="token operator">===</span> <span class="token string">&#39;less&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">cssWorker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>label <span class="token operator">===</span> <span class="token string">&#39;html&#39;</span> <span class="token operator">||</span> label <span class="token operator">===</span> <span class="token string">&#39;handlebars&#39;</span> <span class="token operator">||</span> label <span class="token operator">===</span> <span class="token string">&#39;razor&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">htmlWorker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>label <span class="token operator">===</span> <span class="token string">&#39;typescript&#39;</span> <span class="token operator">||</span> label <span class="token operator">===</span> <span class="token string">&#39;javascript&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">tsWorker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">editorWorker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 调用创建编辑器方法</span>
<span class="token keyword">const</span> editorIns <span class="token operator">=</span> monaco<span class="token punctuation">.</span>editor<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;editor&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;var a=100&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">language</span><span class="token operator">:</span> <span class="token string">&#39;javascript&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 获取编辑器的内容</span>
editorIns<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7);function m(v,b){const a=e("ExternalLinkIcon");return p(),o("div",null,[r,u,n("p",null,[n("a",k,[s("homePage"),c(a)])]),d])}const w=t(i,[["render",m],["__file","editor.html.vue"]]);export{w as default};
